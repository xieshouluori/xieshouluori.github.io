<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>携手落日</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-11T07:34:26.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>妞妞</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Javascript闭包</title>
    <link href="http://yoursite.com/2016/11/11/Javascript%E9%97%AD%E5%8C%85/"/>
    <id>http://yoursite.com/2016/11/11/Javascript闭包/</id>
    <published>2016-11-10T16:00:00.000Z</published>
    <updated>2016-11-11T07:34:26.000Z</updated>
    
    <content type="html">&lt;p&gt;   JS闭包是什么？&lt;br&gt;　　Ali的回答：&lt;br&gt;　　当function里嵌套function时，内部的function可以访问外部function里的变量。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; foo(x) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var tmp = 3;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; bar(y) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        alert(x + y + (++tmp));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bar(10);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(2)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　不管执行多少次，都会alert 16，因为bar能访问foo的参数x，也能访问foo的变量tmp。&lt;br&gt;　　但，这还不是闭包。当你return的是内部function时，就是一个闭包。内部function会close-over外部function的变量直到内部function结束。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function foo(x) {
    var tmp = 3;
    return function (y) {
        alert(x + y + (++tmp));
    }
}
var bar = foo(2); // bar 现在是一个闭包
bar(10);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;　　上面的脚本最终也会alert 16，因为虽然bar不直接处于foo的内部作用域，但bar还是能访问x和tmp。&lt;br&gt;　　但是，由于tmp仍存在于bar闭包的内部，所以它还是会自加1，而且你每次调用bar时它都会自加1.&lt;br&gt;　　（考虑到六岁这个限制：我们其实可以建立不止一个闭包方法，比如return它们的数组，也可以把它们设置为全局变量。它们全都指向相同的x和相同的tmp，而不是各自有一份副本。）&lt;br&gt;　　注：现在来整点儿七岁的内容。&lt;br&gt;　　上面的x是一个字面值（值传递），和JS里其他的字面值一样，当调用foo时，实参x的值被复制了一份，复制的那一份作为了foo的参数x。&lt;br&gt;　　那么问题来了，JS里处理object时是用到引用传递的，那么，你调用foo时传递一个object，foo函数return的闭包也会引用最初那个object！&lt;br&gt;function foo(x) {&lt;br&gt;var tmp = 3;&lt;br&gt;return function (y) {&lt;br&gt;    alert(x + y + tmp);&lt;br&gt;    x.memb = x.memb ? x.memb + 1 : 1;&lt;br&gt;    alert(x.memb);&lt;br&gt;    }&lt;br&gt;}&lt;br&gt;var age = new Number(2);&lt;br&gt;var bar = foo(age); // bar 现在是一个引用了age的闭包&lt;br&gt;bar(10);&lt;br&gt;　　不出我们意料，每次运行bar(10)，x.memb都会自加1。但需要注意的是x每次都指向同一个object变量——age，运行两次bar(10)后，age.memb会变成2.&lt;br&gt;　　这和HTML对象的内存泄漏有关，呃，不过貌似超出了答题的范围。&lt;br&gt;　　JohnMerlino 对Ali说：&lt;br&gt;　　这里有一个不用return关键字的闭包例子：&lt;br&gt;function closureExample(objID, text, timedelay) {&lt;br&gt;    setTimeout(function() {&lt;br&gt;        document.getElementById(objID).innerHTML = text;&lt;br&gt;    }, timedelay);&lt;br&gt;}&lt;br&gt;closureExample(‘myDiv’, ‘Closure is created’, 500);&lt;br&gt;　　深夜1:37 John Pick这样回答：&lt;br&gt;　　JS里的function能访问它们的：&lt;br&gt;　　1. 参数&lt;br&gt;　　2. 局部变量或函数&lt;br&gt;　　3. 外部变量（环境变量？），包括&lt;br&gt;3.1 全局变量，包括DOM。&lt;br&gt;3.2 外部函数的变量或函数。&lt;br&gt;　　如果一个函数访问了它的外部变量，那么它就是一个闭包。&lt;br&gt;　　注意，外部函数不是必需的。通过访问外部变量，一个闭包可以维持（keep alive）这些变量。在内部函数和外部函数的例子中，外部函数可以创建局部变量，并且最终退出；但是，如果任何一个或多个内部函数在它退出后却没有退出，那么内部函数就维持了外部函数的局部数据。&lt;br&gt;　　一个典型的例子就是全局变量的使用。&lt;br&gt;　　mykhal这样回答：&lt;br&gt;　　Wikipedia对闭包的定义是这样的：&lt;br&gt;In computer science, a closure is a function together with a referencing environment for the nonlocal names (free variables) of that function.&lt;br&gt;　　从技术上来讲，在JS中，每个function都是闭包，因为它总是能访问在它外部定义的数据。&lt;br&gt;　　Since scope-defining construction in Javascript is a function, not a code block like in many other languages, what we usually mean by closure in Javascript is a fuction working with nonlocal variables defined in already executed surrounding function.&lt;br&gt;　　闭包经常用于创建含有隐藏数据的函数（但并不总是这样）。&lt;br&gt;var db = (function() {&lt;br&gt;// 创建一个隐藏的object, 这个object持有一些数据&lt;br&gt;// 从外部是不能访问这个object的&lt;br&gt;var data = {};&lt;br&gt;// 创建一个函数, 这个函数提供一些访问data的数据的方法&lt;br&gt;return function(key, val) {&lt;br&gt;    if (val === undefined) { return data[key] } // get&lt;br&gt;    else { return data[key] = val } // set&lt;br&gt;    }&lt;br&gt;// 我们可以调用这个匿名方法&lt;br&gt;// 返回这个内部函数，它是一个闭包&lt;br&gt;})();&lt;/p&gt;
&lt;p&gt;db(‘x’); // 返回 undefined&lt;br&gt;db(‘x’, 1); // 设置data[‘x’]为1&lt;br&gt;db(‘x’); // 返回 1&lt;br&gt;// 我们不可能访问data这个object本身&lt;br&gt;// 但是我们可以设置它的成员&lt;br&gt;　　看了这么多外国大牛的解答，不知道你懂还是不懂，反正我是懂了。&lt;br&gt;　　P.S. 发布文章之后看到@xiaotie的一篇文章，觉得有必要推荐一下，因为其剖析得更为深入。有人说应该在文章结尾对闭包进行总结，可惜小弟才疏学浅，不能给出一个精辟的总结。&lt;br&gt;　　@xiaotie对闭包的总结如下：&lt;br&gt;（1）闭包是一种设计原则，它通过分析上下文，来简化用户的调用，让用户在不知晓的情况下，达到他的目的；&lt;br&gt;（2）网上主流的对闭包剖析的文章实际上是和闭包原则反向而驰的，如果需要知道闭包细节才能用好的话，这个闭包是设计失败的；&lt;br&gt;（3）尽量少学习。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;   JS闭包是什么？&lt;br&gt;　　Ali的回答：&lt;br&gt;　　当function里嵌套function时，内部的function可以访问外部function里的变量。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/10/31/%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2016/10/31/前端项目框架/</id>
    <published>2016-10-31T03:31:49.000Z</published>
    <updated>2016-10-31T03:31:49.000Z</updated>
    
    <content type="html">&lt;p&gt;前端项目框架&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前端项目框架&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/10/31/webpack%20+gulp/"/>
    <id>http://yoursite.com/2016/10/31/webpack +gulp/</id>
    <published>2016-10-31T03:31:20.000Z</published>
    <updated>2016-10-31T03:31:20.000Z</updated>
    
    <content type="html">&lt;p&gt;webpack +gulp&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;webpack +gulp&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/10/31/node%20%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2016/10/31/node 环境搭建/</id>
    <published>2016-10-31T03:30:46.000Z</published>
    <updated>2016-10-31T03:30:46.000Z</updated>
    
    <content type="html">&lt;p&gt;node 环境搭建&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;node 环境搭建&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/10/31/vue-router2.0/"/>
    <id>http://yoursite.com/2016/10/31/vue-router2.0/</id>
    <published>2016-10-31T03:30:19.000Z</published>
    <updated>2016-10-31T03:36:31.000Z</updated>
    
    <content type="html">&lt;p&gt;The old router.go() is now router.push() .&lt;/p&gt;
&lt;p&gt;新的 router.go 类似 window.history.go() : 接受一个数值作为参数在历史栈中导航&lt;/p&gt;
&lt;p&gt;新增的方法:&lt;/p&gt;
&lt;p&gt;router.back()&lt;/p&gt;
&lt;p&gt;router.forward()&lt;/p&gt;
&lt;p&gt;routes 选项取代了 router.map() 。路由配置现在用数组而不是用对象哈希表来作为数据结构。这保证了一致的匹配次序（对象键值枚举的次序是依赖游览器的）。&lt;/p&gt;
&lt;p&gt;以下的路由器实例化选项被作废了：&lt;/p&gt;
&lt;p&gt;history (被 mode 取代)&lt;/p&gt;
&lt;p&gt;abstract (被 mode 取代)&lt;/p&gt;
&lt;p&gt;root (被 base 取代)&lt;/p&gt;
&lt;p&gt;saveScrollPosition (被 scrollBehavior 取代，后者用起来更加灵活，下面会提到)&lt;/p&gt;
&lt;p&gt;hashbang (因为 hashbang 在Google爬站的时候不在需要，所以移除了此选项)&lt;/p&gt;
&lt;p&gt;transitionOnLoad (因为 Vue 2.0 有显式的视觉表现过渡动画控制，所以此选项移除)&lt;/p&gt;
&lt;p&gt;suppressTransitionError (因为钩子函数的系统的简化而移除)&lt;/p&gt;
&lt;p&gt;新的 mode 选项取值为： (默认是 “hash”):&lt;/p&gt;
&lt;p&gt;“abstract”&lt;/p&gt;
&lt;p&gt;“hash”&lt;/p&gt;
&lt;p&gt;“history”&lt;/p&gt;
&lt;p&gt;在不支持 history.pushState 的浏览器中, 路由器会自动回退为 hash 模式.&lt;/p&gt;
&lt;p&gt;下列方法已经作废：&lt;/p&gt;
&lt;p&gt;router.map (被 routes 选项取代)&lt;/p&gt;
&lt;p&gt;router.beforeEach (被 beforeEach 选项取代，不过 beta2中有修改，见下面)&lt;/p&gt;
&lt;p&gt;router.afterEach (被 afterEach 选项取代，不过 beta2中有修改，见下面)&lt;/p&gt;
&lt;p&gt;router.redirect (现在可以在 routes 中直接声明, 参见 Example )&lt;/p&gt;
&lt;p&gt;router.alias (现在可以在 routes 配置中直接声明, 参见 Example )&lt;/p&gt;
&lt;p&gt;1.0版本不用new Vue，一直都是像下面这样启动&lt;br&gt;import app from ‘app.vue’;&lt;br&gt;router.start(app, ‘#app’);&lt;br&gt;2.0官方给的例子全是模版写在template里的， 官方文档也没有这样的例子。我试着在vue2.0的模板里这样挂载结果报错&lt;/p&gt;
&lt;p&gt;import Vue from ‘vue’;&lt;br&gt;import App from ‘./app.vue’;&lt;br&gt;import router from ‘./router’;&lt;/p&gt;
&lt;p&gt;var app = new Vue({&lt;br&gt;    router,&lt;br&gt;    render: h =&amp;gt; h(App)&lt;br&gt;}).$mount(‘#app’);&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;The old router.go() is now router.push() .&lt;/p&gt;
&lt;p&gt;新的 router.go 类似 window.history.go() : 接受一个数值作为参数在历史栈中导航&lt;/p&gt;
&lt;p&gt;新增的方法:&lt;/p&gt;
&lt;p&gt;router.bac
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://yoursite.com/2016/10/31/vuex2.0/"/>
    <id>http://yoursite.com/2016/10/31/vuex2.0/</id>
    <published>2016-10-31T03:29:52.000Z</published>
    <updated>2016-10-31T03:29:52.000Z</updated>
    
    <content type="html">&lt;p&gt;vuex2.0&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;vuex2.0&lt;/p&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>pm2</title>
    <link href="http://yoursite.com/2016/10/30/pm2/"/>
    <id>http://yoursite.com/2016/10/30/pm2/</id>
    <published>2016-10-29T16:00:00.000Z</published>
    <updated>2016-11-30T12:04:26.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;全局安装&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install -g pm2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;启动&quot;&gt;&lt;a href=&quot;#启动&quot; class=&quot;headerlink&quot; title=&quot;启动&quot;&gt;&lt;/a&gt;启动&lt;/h2&gt;&lt;p&gt;启动指定应用程序   —-到运行文件的更目录 &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pm2 start app.js     &lt;span class=&quot;comment&quot;&gt;# 启动app.js应用程序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;``&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;启动所有进程&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pm2 start all&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;重新启动&quot;&gt;&lt;a href=&quot;#重新启动&quot; class=&quot;headerlink&quot; title=&quot;重新启动&quot;&gt;&lt;/a&gt;重新启动&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pm2 restart app.js  &lt;span class=&quot;comment&quot;&gt;# 重启 指定应用程序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pm2 restart all     &lt;span class=&quot;comment&quot;&gt;#重启所有应用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;停止进程&quot;&gt;&lt;a href=&quot;#停止进程&quot; class=&quot;headerlink&quot; title=&quot;停止进程&quot;&gt;&lt;/a&gt;停止进程&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pm2 stop all                  &lt;span class=&quot;comment&quot;&gt;# 停止所有的应用程序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pm2 stop 0                    &lt;span class=&quot;comment&quot;&gt;# 停止 id为 0的指定应用程序&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;##删除进程&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pm2 delete all                &lt;span class=&quot;comment&quot;&gt;# 关闭并删除所有应用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pm2 delete 0                  &lt;span class=&quot;comment&quot;&gt;# 删除指定应用 id 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;## 查看进程状态&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;```bash&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pm2 list&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;##查看某个进程的信息  （查看id为0的指定应用程序)&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pm2 describe 0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;自定义启动的配置文件&quot;&gt;&lt;a href=&quot;#自定义启动的配置文件&quot; class=&quot;headerlink&quot; title=&quot;自定义启动的配置文件&quot;&gt;&lt;/a&gt;自定义启动的配置文件&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;配置文件里的设置项，跟命令行参数基本是一一对应的。
可以选择yaml或者json文件，就看个人洗好了。
json格式的配置文件，pm2当作普通的js文件来处理，所以可以在里面添加注释或者编写代码，这对于动态调整配置很有好处。
如果启动的时候指定了配置文件，那么命令行参数会被忽略。（个别参数除外，比如--env）
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;eg：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;        : &lt;span class=&quot;string&quot;&gt;&quot;test_saas&quot;&lt;/span&gt;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;script&quot;&lt;/span&gt;      : &lt;span class=&quot;string&quot;&gt;&quot;/Users/niuniu/Documents/web/test_saas/bin/www&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;cwd&quot;&lt;/span&gt;         : &lt;span class=&quot;string&quot;&gt;&quot;/Users/niuniu/Documents/web/test_saas&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注释：&lt;br&gt;name :进程名称&lt;br&gt;script :实际启动脚本 （为绝对路径）&lt;br&gt;cwd : 当前工作路径&lt;/p&gt;
&lt;h2 id=&quot;补充-–注意点&quot;&gt;&lt;a href=&quot;#补充-–注意点&quot; class=&quot;headerlink&quot; title=&quot;补充 –注意点&quot;&gt;&lt;/a&gt;补充 –注意点&lt;/h2&gt;&lt;p&gt;1.pm2 start 启动之后，会自动生成一个 进程信息（包含该进程的所有配置信息） ，&lt;br&gt;  即使通过 pm2 stop  结束了本进程 ，但是进程信息会仍然存在 ，再次启动不会重新生成&lt;/p&gt;
&lt;p&gt;2.如果某个进程不再使用 或者配置信息有误   使用 pm2 delete 停止并删除；&lt;br&gt;3.如果某个进程只是暂停 做调整  可以使用 pm2 stop&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;全局安装&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>babel 6.0</title>
    <link href="http://yoursite.com/2016/10/30/babel_6/"/>
    <id>http://yoursite.com/2016/10/30/babel_6/</id>
    <published>2016-10-29T16:00:00.000Z</published>
    <updated>2016-10-30T13:19:00.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Babel 是一个通用的多用途 JavaScript 编译器。通过 Babel 你可以使用（并创建）下一代的 JavaScript，以及下一代的 JavaScript 工具。&lt;/p&gt;
&lt;p&gt;用最新标准编写的 JavaScript 代码向下编译成可以在今天随处可用的版本。 这一过程叫做“源码到源码”编译， 也被称为转换编译。&lt;/p&gt;
&lt;h2 id=&quot;配置-Babel—配置文件-babelrc&quot;&gt;&lt;a href=&quot;#配置-Babel—配置文件-babelrc&quot; class=&quot;headerlink&quot; title=&quot;配置 Babel—配置文件.babelrc&quot;&gt;&lt;/a&gt;配置 Babel—配置文件.babelrc&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;在项目的根路径下创建 .babelrc 文件，告诉 Babel 该做什么，即用来设置转码规则(presers)和插件(plugins)。

基本格式如下：
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;presets&quot;&lt;/span&gt;: [],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;plugins&quot;&lt;/span&gt;: []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;常用转码规则&quot;&gt;&lt;a href=&quot;#常用转码规则&quot; class=&quot;headerlink&quot; title=&quot;常用转码规则&quot;&gt;&lt;/a&gt;常用转码规则&lt;/h3&gt;&lt;p&gt;（1） ES2015转码规则（把 ES2015（最新版本的 JavaScript 标准，也叫做 ES6）编译成 ES5）&lt;br&gt;        安装：&lt;br&gt;        &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --save-dev babel-preset-es2015&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;（2） react转码规则&lt;br&gt;           安装：&lt;br&gt;           &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --save-dev babel-preset-react&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;（3）babel-preset-stage-x&lt;br&gt;    ES7不同阶段语法提案的转码规则（共有4个阶段），选装一个&lt;br&gt;       安装：&lt;br&gt;    &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --save-dev babel-preset-stage-0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --save-dev babel-preset-stage-1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --save-dev babel-preset-stage-2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --save-dev babel-preset-stage-3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;`&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;将以上这些规则加入-babelrc。&quot;&gt;&lt;a href=&quot;#将以上这些规则加入-babelrc。&quot; class=&quot;headerlink&quot; title=&quot;将以上这些规则加入.babelrc。&quot;&gt;&lt;/a&gt;将以上这些规则加入.babelrc。&lt;/h3&gt;&lt;p&gt;  {&lt;br&gt;    “presets”: [&lt;br&gt;          “es2015”,&lt;br&gt;          “react”,&lt;br&gt;          “stage-3”&lt;br&gt;    ],&lt;br&gt;    “plugins”: []&lt;br&gt;  }&lt;/p&gt;
&lt;h2 id=&quot;Babel工具和模块&quot;&gt;&lt;a href=&quot;#Babel工具和模块&quot; class=&quot;headerlink&quot; title=&quot;Babel工具和模块&quot;&gt;&lt;/a&gt;Babel工具和模块&lt;/h2&gt;&lt;h3 id=&quot;babel-cli&quot;&gt;&lt;a href=&quot;#babel-cli&quot; class=&quot;headerlink&quot; title=&quot;babel-cli&quot;&gt;&lt;/a&gt;babel-cli&lt;/h3&gt;&lt;p&gt;Babel提供babel-cli工具—-用于命令行转码&lt;/p&gt;
&lt;p&gt;(1)全局安装&lt;br&gt;1&amp;gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --global babel-cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2&amp;gt;基本用法&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 转码结果输出到标准输出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ babel example.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 转码结果写入一个文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# --out-file 或 -o 参数指定输出文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ babel example.js --out-file compiled.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 或者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ babel example.js -o compiled.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 整个目录转码&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# --out-dir 或 -d 参数指定输出目录&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ babel src --out-dir lib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 或者&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ babel src &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; lib&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# -s 参数生成source map文件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ babel src &lt;span class=&quot;_&quot;&gt;-d&lt;/span&gt; lib &lt;span class=&quot;_&quot;&gt;-s&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;(2)项目内运行 Babel CLI&lt;/p&gt;
&lt;p&gt;尽管你可以把 Babel CLI 全局安装在你的机器上，但是按项目安装会更好。&lt;/p&gt;
&lt;p&gt;有两个主要的原因：&lt;/p&gt;
&lt;p&gt;在同一台机器上的不同项目或许会依赖不同版本的 Babel 并允许你有选择的更新。&lt;br&gt;这意味着你对工作环境没有隐式依赖，这让你的项目有很好的可移植性并且易于安装。&lt;/p&gt;
&lt;p&gt;1&amp;gt;本地安装 Babel CLI&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --save-dev babel-cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2&amp;gt;安装完成后的 package.json&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;devDependencies&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;babel-cli&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;^6.0.0&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;&quot;scripts&quot;&lt;/span&gt;: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;build&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;babel src -d lib&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3&amp;gt;转码的时候，就执行下面的命令。&lt;br&gt;$ npm run build&lt;/p&gt;
&lt;h3 id=&quot;babel-node&quot;&gt;&lt;a href=&quot;#babel-node&quot; class=&quot;headerlink&quot; title=&quot;babel-node&quot;&gt;&lt;/a&gt;babel-node&lt;/h3&gt;&lt;p&gt;如果你要用 node CLI 来运行代码，那么整合 Babel 最简单的方式就是使用 babel-node CLI，它是 node CLI 的替代品。&lt;/p&gt;
&lt;p&gt;它支持Node的REPL环境的所有功能，而且可以直接运行ES6代码。&lt;br&gt;它不用单独安装，而是随babel-cli一起安装。然后，执行babel-node就进入PEPL环境。&lt;/p&gt;
&lt;p&gt;用babel-node替代node，这样代码本身就不用做任何转码处理。&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ babel-node&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt; (x =&amp;gt; x * 2)(1)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;babel-node命令可以直接运行ES6脚本。将上面的代码放入脚本文件es6.js，然后直接运行。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ babel-node es6.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;babel-node也可以安装在项目中。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --save-dev babel-cli&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;然后，改写package.json。&lt;br&gt;{&lt;br&gt;  “scripts”: {&lt;br&gt;    “script-name”: “babel-node script.js”&lt;br&gt;  }&lt;br&gt;}&lt;br&gt;上面代码中，使用babel-node替代node，这样script.js本身就不用做任何转码处理。&lt;/p&gt;
&lt;h3 id=&quot;babel-core&quot;&gt;&lt;a href=&quot;#babel-core&quot; class=&quot;headerlink&quot; title=&quot;babel-core&quot;&gt;&lt;/a&gt;babel-core&lt;/h3&gt;&lt;p&gt;如果你需要以编程的方式来调用Babel的API进行转码，就可以使用 babel-core 这个模块。&lt;/p&gt;
&lt;p&gt;（1）安装 babel-core。&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install babel-core&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;(2)项目中调用&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var babel = require(&lt;span class=&quot;string&quot;&gt;&#39;babel-core&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 字符串转码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;babel.transform(&lt;span class=&quot;string&quot;&gt;&#39;code();&#39;&lt;/span&gt;, options);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// =&amp;gt; &amp;#123; code, map, ast &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 文件转码（异步）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;babel.transformFile(&lt;span class=&quot;string&quot;&gt;&#39;filename.js&#39;&lt;/span&gt;, options, &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(err, result) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  result; // =&amp;gt; &amp;#123; code, map, ast &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 文件转码（同步）&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;babel.transformFileSync(&lt;span class=&quot;string&quot;&gt;&#39;filename.js&#39;&lt;/span&gt;, options);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// =&amp;gt; &amp;#123; code, map, ast &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Babel AST转码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;babel.transformFromAst(ast, code, options);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// =&amp;gt; &amp;#123; code, map, ast &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;babel-polyfill&quot;&gt;&lt;a href=&quot;#babel-polyfill&quot; class=&quot;headerlink&quot; title=&quot;babel-polyfill&quot;&gt;&lt;/a&gt;babel-polyfill&lt;/h3&gt;&lt;p&gt;Babel默认只转换新的JavaScript句法（syntax），而不转换新的API，比如Iterator、Generator、Set、Maps、Proxy、Reflect、Symbol、Promise等全局对象，以及一些定义在全局对象上的方法（比如Object.assign）都不会转码。Babel默认不转码的API非常多。&lt;/p&gt;
&lt;p&gt;举例来说，ES6在Array对象上新增了Arrayfrom方法。Babel就不会转码这个方法。如果想让这个方法运行，必须使用babel-polyfill，为当前环境提供一个垫片。&lt;/p&gt;
&lt;p&gt;（1）用 npm 安装：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install --save babel-polyfill&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;(2)调用&lt;br&gt;然后只需要在文件顶部导入 polyfill 就可以了：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import &lt;span class=&quot;string&quot;&gt;&quot;babel-polyfill&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Babel 是一个通用的多用途 JavaScript 编译器。通过 Babel 你可以使用（并创建）下一代的 JavaScript，以及下一
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>babel5.0 升到6.0 遇到的坑</title>
    <link href="http://yoursite.com/2016/10/30/babel5.0%20%E5%8D%87%E5%88%B06.0%20%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2016/10/30/babel5.0 升到6.0 遇到的坑/</id>
    <published>2016-10-29T16:00:00.000Z</published>
    <updated>2016-10-30T13:16:28.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;安装-babel-cli&quot;&gt;&lt;a href=&quot;#安装-babel-cli&quot; class=&quot;headerlink&quot; title=&quot;安装 babel-cli&quot;&gt;&lt;/a&gt;安装 babel-cli&lt;/h2&gt;&lt;p&gt;在命令行下使用 Babel&lt;/p&gt;
&lt;h2 id=&quot;安装-编译插件：babel-reset-es2015&quot;&gt;&lt;a href=&quot;#安装-编译插件：babel-reset-es2015&quot; class=&quot;headerlink&quot; title=&quot;安装 编译插件：babel-reset-es2015&quot;&gt;&lt;/a&gt;安装 编译插件：babel-reset-es2015&lt;/h2&gt;&lt;p&gt;babel-cli 只是将代码原样输出，需要使用babel-reset-es2015进行编译&lt;/p&gt;
&lt;h3 id=&quot;babel-preset-stage-3&quot;&gt;&lt;a href=&quot;#babel-preset-stage-3&quot; class=&quot;headerlink&quot; title=&quot;babel-preset-stage-3&quot;&gt;&lt;/a&gt;babel-preset-stage-3&lt;/h3&gt;&lt;p&gt;如果不安装babel-preset-stage-3，无法使用vuex2.0中的对象合并&lt;/p&gt;
&lt;p&gt;vuex2.0 中的mapState 返回一个对象。我们如何使用 mapState 合并其他局部的计算属性呢？通常地，为了将多个对象合并为一个对象，再把这个合并好的最终对象传入到 computed 属性去，我们不得不使用一个工具函数来实现。然而有了对象扩展运算符（ECMAScript 提案 stage-3），我们可以大大简化语法：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;computed: &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;localComputed&lt;/span&gt;&lt;/span&gt; () &amp;#123; /* ... */ &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 使用对象扩展运算符，将 mapState 返回的对象和外层其他计算属性混合起来&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  ...mapState(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://vuefe.cn/vuex/state.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vueX2.0&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装-babel-cli&quot;&gt;&lt;a href=&quot;#安装-babel-cli&quot; class=&quot;headerlink&quot; title=&quot;安装 babel-cli&quot;&gt;&lt;/a&gt;安装 babel-cli&lt;/h2&gt;&lt;p&gt;在命令行下使用 Babel&lt;/p&gt;
&lt;h2 id=&quot;安装-编
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>checkbox全选</title>
    <link href="http://yoursite.com/2016/09/02/checkbox%E5%85%A8%E9%80%89/"/>
    <id>http://yoursite.com/2016/09/02/checkbox全选/</id>
    <published>2016-09-02T08:58:18.000Z</published>
    <updated>2016-09-02T09:14:21.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;一-遇到的问题&quot;&gt;&lt;a href=&quot;#一-遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;一 遇到的问题&quot;&gt;&lt;/a&gt;一 遇到的问题&lt;/h2&gt;&lt;p&gt;jq关于checkbox全选的问题，点击全选一次再点一次取消，然后再这么点全选都没有用了&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;这是jq代码为什么全选只有第一次点击有效&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;script &lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         $(&lt;span class=&quot;string&quot;&gt;&quot;.ddd&quot;&lt;/span&gt;).click(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                $(this).closest(&lt;span class=&quot;string&quot;&gt;&quot;tr&quot;&lt;/span&gt;).find(&lt;span class=&quot;string&quot;&gt;&quot;input[type=&#39;checkbox&#39;]&quot;&lt;/span&gt;).attr(&lt;span class=&quot;string&quot;&gt;&quot;checked&quot;&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            $(&lt;span class=&quot;string&quot;&gt;&quot;.noc&quot;&lt;/span&gt;).click(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                $(this).closest(&lt;span class=&quot;string&quot;&gt;&quot;tr&quot;&lt;/span&gt;).find(&lt;span class=&quot;string&quot;&gt;&quot;input[type=&#39;checkbox&#39;]&quot;&lt;/span&gt;).attr(&lt;span class=&quot;string&quot;&gt;&quot;checked&quot;&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/script&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;二-解决办法&quot;&gt;&lt;a href=&quot;#二-解决办法&quot; class=&quot;headerlink&quot; title=&quot;二 解决办法&quot;&gt;&lt;/a&gt;二 解决办法&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;把  .attr(&lt;span class=&quot;string&quot;&gt;&quot;checked&quot;&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);  改成  .prop(&lt;span class=&quot;string&quot;&gt;&quot;checked&quot;&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;三-原理&quot;&gt;&lt;a href=&quot;#三-原理&quot; class=&quot;headerlink&quot; title=&quot;三 原理&quot;&gt;&lt;/a&gt;三 原理&lt;/h2&gt;&lt;p&gt;具有 true 和 false 两个属性的属性，如 checked, selected 或者 disabled 使用prop()，其他的使用 attr()&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;我们看下 attr() 和 prop() 的区别：&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;attr() 里面，最关键的两行代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;elem.setAttribute( name, value + &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt; ); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ret =  elem.getAttribute( name );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;很明显的看出来，使用的 DOM 的 API &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;Attribute() 和 getAttribute() 方法操作的属性元素节点。&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;prop() 里面，最关键的两行代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; ( elem[ name ] = value );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; elem[ name ];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;可以理解为 document.getElementById(el)[name] = value，这是转化成 element 的一个属性。&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;不建议使用 attr() 来对具有 true 和 false 两个属性的属性进行操作了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-遇到的问题&quot;&gt;&lt;a href=&quot;#一-遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;一 遇到的问题&quot;&gt;&lt;/a&gt;一 遇到的问题&lt;/h2&gt;&lt;p&gt;jq关于checkbox全选的问题，点击全选一次再点一次取消，然后再这么点全选都没有用了&lt;/p&gt;
&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 模块化编程</title>
    <link href="http://yoursite.com/2016/04/11/module_pattern/"/>
    <id>http://yoursite.com/2016/04/11/module_pattern/</id>
    <published>2016-04-11T06:09:44.000Z</published>
    <updated>2016-04-11T07:27:36.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;一-模块模式&quot;&gt;&lt;a href=&quot;#一-模块模式&quot; class=&quot;headerlink&quot; title=&quot;一 模块模式&quot;&gt;&lt;/a&gt;一 模块模式&lt;/h2&gt;&lt;h3 id=&quot;（1）-闭包与-IIFE&quot;&gt;&lt;a href=&quot;#（1）-闭包与-IIFE&quot; class=&quot;headerlink&quot; title=&quot;（1） 闭包与 IIFE&quot;&gt;&lt;/a&gt;（1） 闭包与 IIFE&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;;(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (参数) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 模块代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; something;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;(参数));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;模块模式的本质:&lt;br&gt;(1)可以定义私有变量和函数，外部无法访问它们，从而做到了私有成员的隐藏和隔离。&lt;/p&gt;
&lt;p&gt;(2)通过返回对象或函数,可以公开我们对外暴露的公开的方法与数据。&lt;/p&gt;
&lt;h3 id=&quot;（2）参数输入&quot;&gt;&lt;a href=&quot;#（2）参数输入&quot; class=&quot;headerlink&quot; title=&quot;（2）参数输入&quot;&gt;&lt;/a&gt;（2）参数输入&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;;(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (q, w) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // q is jQuery&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // w is window&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 局部变量及代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // 返回&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)(jQuery, window);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果模块内需要使用其它全局对象，应该将这些对象作为参数来显式引用它们&lt;/p&gt;
&lt;p&gt;将引用的对象作为参数，使它们得以和函数内的其它局部变量区分开来&lt;/p&gt;
&lt;h3 id=&quot;（3）模块输出（Module-Export）&quot;&gt;&lt;a href=&quot;#（3）模块输出（Module-Export）&quot; class=&quot;headerlink&quot; title=&quot;（3）模块输出（Module Export）&quot;&gt;&lt;/a&gt;（3）模块输出（Module Export）&lt;/h3&gt;&lt;p&gt;通过匿名函数的 return 语句来声明和输出模块中的对象&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var MODULE = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt; () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    var my = &amp;#123;&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        privateVariable = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    my.moduleProperty = 1;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    my.moduleMethod = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt; () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; my;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;（4）与其它模块规范或-JS-库的适配&quot;&gt;&lt;a href=&quot;#（4）与其它模块规范或-JS-库的适配&quot; class=&quot;headerlink&quot; title=&quot;（4）与其它模块规范或 JS 库的适配&quot;&gt;&lt;/a&gt;（4）与其它模块规范或 JS 库的适配&lt;/h3&gt;&lt;p&gt;AMD 定义了 define 函数，可以使用 define 来编写模块化的代码&lt;br&gt;CommonJS定义了exports 或是 module.exports &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//注册模块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//代码既兼容于 CommonJS Modules 或 AMD 规范，又能在一般环境下运行&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (typeof module !== &lt;span class=&quot;string&quot;&gt;&#39;undefined&#39;&lt;/span&gt; &amp;amp;&amp;amp; module.exports) &amp;#123; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  module.exports = plug;    //CommonJS&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (typeof define === &lt;span class=&quot;string&quot;&gt;&#39;function&#39;&lt;/span&gt; &amp;amp;&amp;amp; define.amd) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  define(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;() &amp;#123;       //AMD&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; plug;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;     //一般环境&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; this || (0, &lt;span class=&quot;built_in&quot;&gt;eval&lt;/span&gt;)(&lt;span class=&quot;string&quot;&gt;&#39;this&#39;&lt;/span&gt;);   //获取全局对象  若代码运行于浏览器中，得到的其实是 window 对象&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;()).plug = plug;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上代码可以让我们的代码既兼容于 CommonJS Modules 或 AMD 规范，又能在一般环境下运行&lt;/p&gt;
&lt;h2 id=&quot;二-模块模式的变化&quot;&gt;&lt;a href=&quot;#二-模块模式的变化&quot; class=&quot;headerlink&quot; title=&quot;二 模块模式的变化&quot;&gt;&lt;/a&gt;二 模块模式的变化&lt;/h2&gt;&lt;h3 id=&quot;1-扩展&quot;&gt;&lt;a href=&quot;#1-扩展&quot; class=&quot;headerlink&quot; title=&quot;(1)扩展&quot;&gt;&lt;/a&gt;(1)扩展&lt;/h3&gt;&lt;h4 id=&quot;对已有的模块作出扩展-模块的各个组成部分并没有加载顺序要求&quot;&gt;&lt;a href=&quot;#对已有的模块作出扩展-模块的各个组成部分并没有加载顺序要求&quot; class=&quot;headerlink&quot; title=&quot;对已有的模块作出扩展(模块的各个组成部分并没有加载顺序要求)&quot;&gt;&lt;/a&gt;对已有的模块作出扩展(模块的各个组成部分并没有加载顺序要求)&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var MODULE = (&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (my) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  // add capabilities...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; my;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;(MODULE || &amp;#123;&amp;#125;));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;紧耦合扩展-对模块的定义顺序是有要求的&quot;&gt;&lt;a href=&quot;#紧耦合扩展-对模块的定义顺序是有要求的&quot; class=&quot;headerlink&quot; title=&quot;紧耦合扩展(对模块的定义顺序是有要求的)&quot;&gt;&lt;/a&gt;紧耦合扩展(对模块的定义顺序是有要求的)&lt;/h4&gt;&lt;p&gt;要求在扩展时调用以前已被定义的方法，这也有可能被用于覆盖已有的方法&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var MODULE = (&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (my) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var old_moduleMethod = my.moduleMethod;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  my.moduleMethod = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt; () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 方法重载&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // 可通过 old_moduleMethod 调用以前的方法...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; my;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;(MODULE));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-克隆与继承（利用Object-create-）&quot;&gt;&lt;a href=&quot;#2-克隆与继承（利用Object-create-）&quot; class=&quot;headerlink&quot; title=&quot;(2)克隆与继承（利用Object.create() ）&quot;&gt;&lt;/a&gt;(2)克隆与继承（利用Object.create() ）&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var MODULE_TWO = (&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (old) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var my = Object.create(old);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  var super_moduleMethod = old.moduleMethod;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  my.moduleMethod = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt; () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    // override method ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; my;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;(MODULE));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一-模块模式&quot;&gt;&lt;a href=&quot;#一-模块模式&quot; class=&quot;headerlink&quot; title=&quot;一 模块模式&quot;&gt;&lt;/a&gt;一 模块模式&lt;/h2&gt;&lt;h3 id=&quot;（1）-闭包与-IIFE&quot;&gt;&lt;a href=&quot;#（1）-闭包与-IIFE&quot; class=&quot;head
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>style、currentStyle、getComputedStyle的区别</title>
    <link href="http://yoursite.com/2016/03/17/getComputedStyle/"/>
    <id>http://yoursite.com/2016/03/17/getComputedStyle/</id>
    <published>2016-03-17T06:52:12.000Z</published>
    <updated>2016-04-08T08:37:37.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;css设置样式分为三种方式&quot;&gt;&lt;a href=&quot;#css设置样式分为三种方式&quot; class=&quot;headerlink&quot; title=&quot;css设置样式分为三种方式&quot;&gt;&lt;/a&gt;css设置样式分为三种方式&lt;/h2&gt;&lt;p&gt;1.内嵌样式（inline Style） ：写在Tag里面的style属性中，只对所在Tag有效。&lt;/p&gt;
&lt;p&gt;2.内部样式（internal Style Sheet）：是写在HTML的style标签内部，只对所在的网页有效。&lt;/p&gt;
&lt;p&gt;3.外部样式表（External Style Sheet）：一个以.css为后缀的CSS文件，然后在每个需要用到这些样式(Styles)的网页里引用这个CSS文件。 &lt;/p&gt;
&lt;h2 id=&quot;js获取样式&quot;&gt;&lt;a href=&quot;#js获取样式&quot; class=&quot;headerlink&quot; title=&quot;js获取样式&quot;&gt;&lt;/a&gt;js获取样式&lt;/h2&gt;&lt;p&gt;1.style属性：&lt;/p&gt;
&lt;p&gt;通过document.getElementById(id).style.XXX就可以获取到XXX的值。(可读可写)&lt;/p&gt;
&lt;p&gt;作用：只能取到通过内嵌方式设置的样式值，即style属性里面设置的值&lt;/p&gt;
&lt;p&gt;2.runtimeStyle ：&lt;/p&gt;
&lt;p&gt;通过document.getElementById(id).runtimeStyle.XXX设置&lt;/p&gt;
&lt;p&gt;作用：运行时的样式！如果与style的属性重叠，将覆盖style的属性！&lt;/p&gt;
&lt;p&gt;3.currentStyle 与 getComputedStyle&lt;/p&gt;
&lt;p&gt;（1）作用：获取元素中所有可用的css属性&lt;/p&gt;
&lt;p&gt;（2）应用：IE使用currentStyle，其他浏览器用getComputedStyle&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var computed = !!window.getComputedStyle;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!computed) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  window.getComputedStyle = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(el) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.el = el;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    this.getPropertyValue = &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(prop) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      var re = /(\-([a-z])&amp;#123;1&amp;#125;)/g;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (prop === &lt;span class=&quot;string&quot;&gt;&quot;float&quot;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        prop = &lt;span class=&quot;string&quot;&gt;&quot;styleFloat&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (re.test(prop)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        prop = prop.replace(re, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt; () &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;          &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; arguments[2].toUpperCase();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; el.currentStyle[prop] ? el.currentStyle[prop] : null;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; this;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（3）语法：&lt;/p&gt;
&lt;p&gt;1&amp;gt; getComputedStyle：(只读不可写－－－只能获取样式，不能设置)&lt;/p&gt;
&lt;p&gt;获取属性列表&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;arr_style=window.getComputedStyle(元素,伪类)

伪元素，是否要获取伪元素属性值。如hover,active,link等属性。如果不想获取这些伪元素的属性值请填写为null。

eg1: style = window.getComputedStyle(elem_id , &amp;quot;:after&amp;quot;);

eg2：var width = window.getComputedStyle(mydiv , null);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;获取具体的属性值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;eg1：var width = window.getComputedStyle(mydiv , null)[&amp;apos;width&amp;apos;];

eg2：var width = window.getComputedStyle(mydiv , null).width;

eg3：var width = window.getComputedStyle(mydiv , null).getPropertyValue(&amp;quot;width&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;获取float，如果使用键值访问，则不能直接使用getComputedStyle(element, null).float，而应该是cssFloat与styleFloat，自然需要浏览器判断了，比较折腾！&lt;/p&gt;
&lt;p&gt;2&amp;gt; currentStyle&lt;/p&gt;
&lt;p&gt;eg:var width = mydiv.currentStyle[‘width’];&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;css设置样式分为三种方式&quot;&gt;&lt;a href=&quot;#css设置样式分为三种方式&quot; class=&quot;headerlink&quot; title=&quot;css设置样式分为三种方式&quot;&gt;&lt;/a&gt;css设置样式分为三种方式&lt;/h2&gt;&lt;p&gt;1.内嵌样式（inline Style） ：写在Ta
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/03/17/hello-world/"/>
    <id>http://yoursite.com/2016/03/17/hello-world/</id>
    <published>2016-03-17T06:52:12.000Z</published>
    <updated>2016-03-17T10:09:02.000Z</updated>
    
    <content type="html">&lt;p&gt;Welcome to 我的博客&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/writing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Writing&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Run-server&quot;&gt;&lt;a href=&quot;#Run-server&quot; class=&quot;headerlink&quot; title=&quot;Run server&quot;&gt;&lt;/a&gt;Run server&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/server.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Server&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Generate-static-files&quot;&gt;&lt;a href=&quot;#Generate-static-files&quot; class=&quot;headerlink&quot; title=&quot;Generate static files&quot;&gt;&lt;/a&gt;Generate static files&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo generate&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/generating.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Generating&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;Deploy-to-remote-sites&quot;&gt;&lt;a href=&quot;#Deploy-to-remote-sites&quot; class=&quot;headerlink&quot; title=&quot;Deploy to remote sites&quot;&gt;&lt;/a&gt;Deploy to remote sites&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo deploy&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;More info: &lt;a href=&quot;https://hexo.io/docs/deployment.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Deployment&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to 我的博客&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create
    
    </summary>
    
    
  </entry>
  
</feed>
